{"version":3,"sources":["webpack://vue-flowy/webpack/universalModuleDefinition","webpack://vue-flowy/webpack/bootstrap","webpack://vue-flowy/./src/VueFlowy.vue?33d2","webpack://vue-flowy/./src/graph/Node.js","webpack://vue-flowy/./src/graph/Edge.js","webpack://vue-flowy/./src/graph/Layout.js","webpack://vue-flowy/./src/Graph.js","webpack://vue-flowy/./src/graph/Svg.js","webpack://vue-flowy/./src/graph/Shape.js","webpack://vue-flowy/./src/graph/Label.js","webpack://vue-flowy/./src/Renderer.js","webpack://vue-flowy/./src/FlowElement.js","webpack://vue-flowy/./src/FlowChart.js","webpack://vue-flowy/src/VueFlowy.vue","webpack://vue-flowy/./src/VueFlowy.vue?d097","webpack://vue-flowy/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-flowy/./src/VueFlowy.vue","webpack://vue-flowy/./src/main.js","webpack://vue-flowy/./src/VueFlowy.vue?f414","webpack://vue-flowy/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","id","_uid","staticRenderFns","defaults","paddingLeft","paddingRight","paddingTop","paddingBottom","rx","ry","shape","width","height","GraphNode","[object Object]","options","setOptions","label","assign","DEFAULT_EDGE_NAME","EDGE_KEY_DELIM","Edge_defaults","minLen","weight","labelOffset","labelPos","Edge","from","to","order","points","directed","tmp","Layout_Layout","graph","runLayout","console","log","makeSpaceForEdgeLabels","createNestingGraph","rank","cleanupNestingGraph","position","translateGraph","rankSep","edges","forEach","edge","toLowerCase","rankDir","setNode","dummy","depths","treeDepths","Math","max","values","nodeSep","reduce","prevVal","getChildren","child","dfs","nodeRankFactor","removeNode","nestingEdge","removeEdge","layout","nodeId","depth","children","length","childId","setEdge","top","addBorderNode","bottom","setParent","borderTop","borderBottom","childTop","childBottom","thisWeight","parent","prefix","node","addDummyNode","type","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","positionY","buildLayerMatrix","layering","prevY","layer","maxHeight","map","y","nodes","longestPath","feasibleTree","visited","_longestPath","min","outEdges","outEdge","Infinity","sources","treeGraph","Graph_Graph","start","nodeIds","size","delta","doneTimes","tightTree","findMinSlackEdge","hasNode","slack","shiftRanks","Error","nodeEdges","minSlackEdge","minSlack","maxRank","prevV","minX","maxX","minY","maxY","marginX","marginY","getExtremes","x","w","h","point","GRAPH_NODE","multiGraph","compound","edgeSep","_nodes","_edges","in","preds","out","sucs","edgeId","generateId","fromNode","toNode","childArray","keys","parentId","ancestor","inEdges","concat","filter","inFrom","outFrom","GraphSvg","tag","document","createElementNS","el","appendChild","attribute","setAttribute","selector","res","querySelector","querySelectorAll","Array","createTextNode","classList","add","Shape_Shape","shapeType","bbox","getBBox","attr","Label_GraphLabel","labelData","group","textLabel","append","text","Renderer_Renderer","svg","createOrSelectGroup","createEdgeLabels","createNodes","slice","positionNodes","selection","isSubgraph","graphNode","nodeGroup","addClass","labelGroup","labelBBox","shapeBBox","svgGroup","g","selectAll","edgeLabelGroup","select","FlowElement","destinationElement","push","otherId","FlowChart_FlowChart","elements","element","k","renderer","VueFlowyvue_type_script_lang_js","props","chart","required","chartElement","watch","chart.elements","newVal","oldVal","getElementById","src_VueFlowyvue_type_script_lang_js","normalizeComponent","scriptExports","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","_compiled","functional","_scopeId","context","$vnode","ssrContext","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","existing","beforeCreate","component","VueFlowy","main_plugin","install","Vue","main","FlowChart","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_8_oneOf_2_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_2_2_node_modules_vue_loader_lib_index_js_vue_loader_options_VueFlowy_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default","currentScript","src","match"],"mappings":"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","file":"vue-flowy.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-flowy\"] = factory();\n\telse\n\t\troot[\"vue-flowy\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"+xUi\");\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"flowyChart\",attrs:{\"id\":_vm._uid}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","const defaults = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: 'rect',\n  width: 0,\n  height: 0\n}\n\nexport default class GraphNode {\n  constructor(id, options) {\n    /** @type {string} */\n    this.id = id\n    this.setOptions(options)\n  }\n\n  setOptions(options = {}) {\n    if (!options.label) {\n      options.label = this.id\n    }\n\n    Object.assign(this, defaults, options)\n  }\n\n  setDefaults() {}\n}\n","const DEFAULT_EDGE_NAME = '\\x00'\nconst EDGE_KEY_DELIM = '\\x01'\n\nconst defaults = {\n  minLen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labelOffset: 10,\n  labelPos: 'r'\n}\n\nexport default class Edge {\n  constructor(id, from, to, options) {\n    this.id = id\n    this.from = from\n    this.to = to\n    this.order = 0\n    this.points = []\n    this.setOptions(options)\n  }\n\n  static generateId(from, to, directed = false) {\n    if (!directed && from > to) {\n      const tmp = from\n      from = to\n      to = tmp\n    }\n    return from + EDGE_KEY_DELIM + to + EDGE_KEY_DELIM + DEFAULT_EDGE_NAME\n  }\n\n  setOptions(options) {\n    Object.assign(this, defaults, options)\n  }\n}","import Graph from '../Graph'\nimport GraphNode from './Node'\nimport Edge from './Edge'\n\nexport default class Layout {\n  /**\n   *\n   * @param {Graph} graph\n   */\n  constructor(graph) {\n    /** @type {Graph} */\n    this.graph = graph\n    this.runLayout()\n    console.log('new layout for graph', graph)\n  }\n\n  runLayout() {\n    this.makeSpaceForEdgeLabels()\n    this.createNestingGraph()\n    this.rank()\n    this.cleanupNestingGraph()\n    this.order()\n    this.position()\n    this.translateGraph()\n  }\n\n  makeSpaceForEdgeLabels() {\n    this.graph.rankSep /= 2\n    console.log(this.graph)\n    this.graph.edges.forEach(edge => {\n      console.log('making space for edge', edge)\n      edge.minLen *= 2\n\n      if (edge.labelPos.toLowerCase() === 'c') {\n        return\n      }\n\n      if (this.graph.rankDir === 'TB' || this.graph.rankDir === 'BT') {\n        edge.width += edge.labelOffset\n      } else {\n        edge.height += edge.labelOffset\n      }\n    })\n  }\n\n  createNestingGraph() {\n    console.log('creating nesting graph')\n    this.graph.root = this.graph.setNode('_root', { dummy: 'root' })\n    const depths = this.treeDepths()\n    console.log('depths', depths)\n    const height = Math.max(...Object.values(depths)) - 1\n    const nodeSep = 2 * height + 1\n\n    // multiply minLen by nodeSep to align nodes on non-border ranks\n    this.graph.edges.forEach(edge => {\n      edge.minLen *= nodeSep\n    })\n\n    // calculate a weight that is sufficient to keep subgraphs vertically compact\n    const weight = this.graph.edges.reduce(\n      (prevVal, edge) => prevVal + edge.weight,\n      0\n    )\n\n    // create border nodes and link them up\n    this.graph.getChildren().forEach(child => {\n      console.log('calling dfs with', this.graph.root, nodeSep, weight, height, depths, child)\n      this.dfs(this.graph.root, nodeSep, weight, height, depths, child)\n    })\n\n    this.graph.nodeRankFactor = nodeSep\n  }\n\n  cleanupNestingGraph() {\n    this.graph.removeNode(this.graph.root.id)\n    this.graph.root = null\n    this.graph.edges.forEach(edge => {\n      if (edge.nestingEdge) {\n        this.graph.removeEdge(edge.id)\n      }\n    })\n  }\n\n  treeDepths() {\n    const depths = {}\n    const layout = this\n\n    function dfs(nodeId, depth = 1) {\n      const children = layout.graph.getChildren(nodeId)\n      console.log('children of', nodeId, 'are', children, '. depth:', depth)\n      if (children && children.length) {\n        children.forEach(childId => {\n          console.log('child', childId)\n          dfs(childId, depth + 1)\n        })\n      }\n      depths[nodeId] = depth\n    }\n    this.graph.getChildren().forEach(childId => {\n      dfs(childId)\n    })\n    return depths\n  }\n\n  /**\n   *\n   * @param {GraphNode} root\n   * @param {*} nodeSep\n   * @param {*} weight\n   * @param {*} height\n   * @param {*} depths\n   * @param {GraphNode} node\n   */\n  dfs(root, nodeSep, weight, height, depths, nodeId) {\n    const children = this.graph.getChildren(nodeId)\n    console.log('DFS: children of', nodeId, children)\n    if (!children.length) {\n      if (nodeId !== root.id) {\n        this.graph.setEdge(root.id, nodeId, { weight: 0, minLen: nodeSep })\n      }\n      return\n    }\n\n    const top = this.addBorderNode('_bt')\n    const bottom = this.addBorderNode('_bb')\n\n    this.graph.setParent(top, nodeId)\n    this.graph.borderTop = top\n    this.graph.setParent(bottom, nodeId)\n    this.graph.borderBottom = bottom\n\n    const dfs = this.dfs\n\n    children.forEach(child => {\n      this.dfs(root, nodeSep, weight, height, depths, child)\n\n      const childTop = child.borderTop ? child.borderTop : child\n      const childBottom = child.borderBottom ? child.borderBottom : child\n      const thisWeight = child.borderTop ? weight : 2 * weight\n      const minLen = childTop !== childBottom ? 1 : height - depths[nodeId] + 1\n\n      this.graph.setEdge(top, childTop, {\n        weight: thisWeight,\n        minLen: minLen,\n        nestingEdge: true\n      })\n\n      this.graph.setEdge(childBottom, bottom, {\n        weight: thisWeight,\n        minLen: minLen,\n        nestingEdge: true\n      })\n    })\n\n    if (!this.graph.parent(nodeId)) {\n      this.graph.setEdge(root, top, {\n        weight: 0,\n        minLen: height + depths[nodeId]\n      })\n    }\n  }\n\n  addBorderNode(prefix, rank, order) {\n    const node = {\n      width: 0,\n      height: 0\n    }\n    if (rank && order) {\n      node.rank = rank\n      node.order = order\n    }\n    return this.addDummyNode('border', node, prefix)\n  }\n\n  addDummyNode(type, attrs, name) {\n    attrs.dummy = type\n    this.graph.setNode(name, attrs)\n    return name\n  }\n\n  rank() {\n    switch (this.graph.ranker) {\n      case 'network-simplex':\n        this.networkSimplexRanker()\n        break\n      case 'tight-tree':\n        this.tightTreeRanker()\n        break\n      case 'longest-path':\n        this.longestPathRanker()\n        break\n      default:\n        this.networkSimplexRanker()\n        break\n    }\n  }\n\n  position() {\n    this.positionY()\n  }\n\n  positionX() {\n    const layering = this.buildLayerMatrix()\n  }\n\n  positionY() {\n    const layering = this.buildLayerMatrix()\n    console.log('layering', layering)\n    const rankSep = this.graph.rankSep\n    let prevY = 0\n    layering.forEach(layer => {\n      const maxHeight = Math.max(\n        layer.map(node => {\n          return node.height\n        })\n      )\n      console.log('maxHeight of nodes layer', maxHeight)\n      layer.forEach(node => {\n        node.y = prevY + maxHeight / 2\n      })\n      prevY += maxHeight + rankSep\n    })\n  }\n\n  buildLayerMatrix() {\n    const layering = []\n    this.graph.nodes.forEach(node => {\n      console.log('creating layer with node', node, node.rank)\n      if (node.rank) {\n        if (!layering[node.rank]) {\n          layering[node.rank] = []\n        }\n        layering[node.rank][node.order] = node\n      }\n    })\n\n    return layering\n  }\n\n  networkSimplexRanker() {\n    this.longestPath()\n    this.feasibleTree()\n  }\n\n  longestPath() {\n    const layout = this\n    const visited = {}\n\n    function _longestPath(node) {\n      if (visited[node.id]) {\n        return node.rank\n      }\n      visited[node.id] = true\n\n      const min = Math.min(...layout.graph.outEdges(node).map(outEdge => {\n          return _longestPath(outEdge.to) - outEdge.minLen\n      }))\n      const rank = min === Infinity ? 0 : min\n\n      return (node.rank = rank)\n    }\n\n    this.graph.sources.forEach(_longestPath)\n  }\n\n  feasibleTree() {\n    this.treeGraph = new Graph({ directed: false })\n\n    const start = this.graph.nodeIds[0]\n    const size = this.graph.nodeIds.length\n    this.treeGraph.setNode(start)\n    console.log('start is', start, 'size is', size)\n\n    let edge\n    let delta\n    let doneTimes = 0\n    while (this.tightTree() < size) {\n      edge = this.findMinSlackEdge()\n      delta = this.treeGraph.hasNode(edge.from.id)\n        ? this.slack(edge)\n        : -this.slack(edge)\n      this.shiftRanks(delta)\n      doneTimes++\n      if (doneTimes > 200) {\n        throw new Error('too many loops, breaking now!')\n      }\n    }\n  }\n\n  /**\n   * Finds a maximal tree of tight edges and returns the number of nodes in the tree\n   */\n  tightTree() {\n    const layout = this\n    function dfs(node) {\n      console.log('nodeEdges', layout.graph.nodeEdges(node))\n      layout.graph.nodeEdges(node).forEach(edge => {\n        console.log('nodeEdge for', node.id, edge)\n        const to = node.id === edge.from.id ? edge.to : edge.from\n        console.log('not hasNode', !layout.treeGraph.hasNode(to.id), 'not slack', !layout.slack(edge))\n        if (!layout.treeGraph.hasNode(to.id) && !layout.slack(edge)) {\n          console.log('adding node to tighttree', to)\n          layout.treeGraph.setNode(to.id)\n          layout.treeGraph.setEdge(node.id, to.id)\n          dfs(to)\n        }\n      })\n    }\n\n    this.treeGraph.nodes.forEach(dfs)\n    console.log('tightTree size is', this.treeGraph.nodeIds.length)\n    return this.treeGraph.nodeIds.length\n  }\n\n  findMinSlackEdge() {\n    let minSlackEdge\n    let minSlack = Infinity\n\n    console.log('finding min slack edge')\n\n    this.graph.edges.forEach(edge => {\n      if (\n        this.treeGraph.hasNode(edge.from.id) !==\n        this.treeGraph.hasNode(edge.to.id)\n      ) {\n        const slack = this.slack(edge)\n        if (slack < minSlack) {\n          minSlackEdge = edge\n          minSlack = slack\n        }\n      }\n    })\n\n    return minSlackEdge\n  }\n\n  /**\n   * Returns the amount of slack for the given edge. The slack is defined as the difference\n   * between the length of the edge and its minimum length\n   * @param {Edge} edge\n   */\n  slack(edge) {\n    console.log(\n      'calculating slack of',\n      edge,\n      edge.to.rank,\n      edge.from.rank,\n      edge.minLen\n    )\n    return edge.to.rank - edge.from.rank - edge.minLen\n  }\n\n  order() {\n    const maxRank = this.maxRank()\n    console.log('STOPPED HERE, code further!')\n    // const downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges')\n    // const upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges')\n\n    // let layering = initOrder(g)\n    // assignOrder(g, layering)\n\n    // let bestCC = Number.POSITIVE_INFINITY\n    // let best\n\n    // for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    //   sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2)\n\n    //   layering = util.buildLayerMatrix(g)\n    //   const cc = crossCount(g, layering)\n    //   if (cc < bestCC) {\n    //     lastBest = 0\n    //     best = _.cloneDeep(layering)\n    //     bestCC = cc\n    //   }\n    // }\n\n    // assignOrder(g, best)\n  }\n\n  maxRank() {\n    this.graph.nodes.reduce((prevV, node) => {\n      return node.rank > prevV ? node.rank : prevV\n    }, -Infinity)\n  }\n\n  shiftRanks(delta) {\n    this.treeGraph.nodes.forEach(node => {\n      node.rank += delta\n    })\n  }\n\n  translateGraph() {\n    let minX = Infinity\n    let maxX = 0\n    let minY = Infinity\n    let maxY = 0\n    const marginX = this.graph.marginX || 0\n    const marginY = this.graph.marginY || 0\n\n    function getExtremes(o) {\n      const x = o.x\n      const y = o.y\n      const w = o.width\n      const h = o.height\n      minX = Math.min(minX, x - w / 2)\n      maxX = Math.max(maxX, x + w / 2)\n      minY = Math.min(minY, y - h / 2)\n      maxY = Math.max(maxY, y + h / 2)\n    }\n\n    this.graph.nodes.forEach(getExtremes)\n\n    this.graph.edges.forEach(edge => {\n      if (edge.x) {\n        getExtremes(edge)\n      }\n    })\n\n    minX -= marginX\n    minY -= marginY\n\n    this.graph.nodes.forEach(node => {\n      node.x -= minX\n      node.y -= minY\n    })\n\n    this.graph.edges.forEach(edge => {\n      edge.points.forEach(point => {\n        point.x -= minX\n        point.y -= minY\n      })\n\n      if (edge.x) {\n        edge.x -= minX\n      }\n\n      if (edge.y) {\n        edge.y -= minY\n      }\n    })\n\n    this.graph.width = maxX - minX + marginX\n    this.graph.height = maxY - minY + marginY\n  }\n}\n","import GraphNode from './graph/Node'\nimport Layout from './graph/Layout'\nimport Edge from './graph/Edge'\n\nconst GRAPH_NODE = '\\x00'\n\nexport default class Graph {\n  constructor({\n    directed = true,\n    multiGraph = false,\n    compound = false,\n    rankDir = 'TB',\n    rankSep = 50,\n    edgeSep = 20,\n    nodeSep = 50,\n    marginX = 20,\n    marginY = 20\n  }) {\n    Object.assign(this, {\n      directed,\n      multiGraph,\n      compound,\n      rankDir,\n      rankSep,\n      edgeSep,\n      nodeSep,\n      marginX,\n      marginY\n    })\n    /** @type {{id: GraphNode}} */\n    this._nodes = {}\n    /** @type {{id: Edge}} */\n    this._edges = {}\n\n    if (this.compound === true) {\n      this.parent = {}\n      this.children = {}\n      this.children[GRAPH_NODE] = {}\n    }\n\n    /** @type {GraphNode} */\n    this.root = null\n\n    // v -> edgeObj\n    this.in = {}\n\n    // u -> v -> Number\n    this.preds = {}\n\n    // v -> edgeObj\n    this.out = {}\n\n    // v -> w -> Number\n    this.sucs = {}\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @param {{}} options\n   * @returns {GraphNode} node\n   */\n  setNode(id, options) {\n    if (this._nodes[id]) {\n      if (options) {\n        this._nodes[id].setOptions(options)\n      }\n      return this._nodes[id]\n    }\n\n    console.log('creating node', id, options)\n\n    this._nodes[id] = new GraphNode(id, options)\n\n    if (this.compound === true) {\n      this.parent[id] = GRAPH_NODE\n      this.children[id] = {}\n      this.children[GRAPH_NODE][id] = true\n    }\n\n    this.in[id] = {}\n    this.preds[id] = {}\n    this.out[id] = {}\n    this.sucs[id] = {}\n    return this._nodes[id]\n  }\n\n  /**\n   *\n   * @param {string} id\n   */\n  removeNode(id) {\n    console.log('TODO: removing not finished')\n    if (!this._nodes[id]) {\n      return\n    }\n\n    delete this._nodes[id]\n\n    if (this.compound) {\n      delete this.parent[id]\n      delete this.children[id]\n    }\n\n    delete this.in[id]\n    delete this.preds[id]\n    delete this.out[id]\n    delete this.sucs[id]\n  }\n\n  /**\n   *\n   * @param {string} from\n   * @param {string} to\n   * @param {{}} options\n   */\n  setEdge(from, to, options) {\n    console.log('setting edge', from, to, options)\n\n    const edgeId = Edge.generateId(from, to, this.directed)\n\n    if (this._edges[edgeId]) {\n      if (options) {\n        this._edges[edgeId].setOptions(options)\n      }\n      return this\n    }\n\n    // first ensure the nodes exist\n    const fromNode = this.setNode(from)\n    const toNode = this.setNode(to)\n\n    const edge = new Edge(edgeId, fromNode, toNode, options)\n\n    this._edges[edgeId] = edge\n\n    this.out[from][edgeId] = edge\n    this.in[to][edgeId] = edge\n    return this\n  }\n\n  /**\n   *\n   * @param {string} id\n   */\n  removeEdge(id) {\n    console.log('TODO: removing not finished')\n    if (!this.edges[id]) {\n      return\n    }\n    /** @type {Edge} */\n    const edge = this._edges[id]\n    delete this.in[edge.from]\n    delete this.out[edge.to]\n    delete this._edges[id]\n  }\n\n  getNode(id) {\n    return this._nodes[id]\n  }\n\n  getChildren(id) {\n    if (!id) {\n      id = GRAPH_NODE\n    }\n\n    if (this.compound) {\n      const childArray = this.children[id]\n      if (childArray) {\n        return Object.keys(childArray)\n      }\n    } else if (id === GRAPH_NODE) {\n      return this.nodes\n    } else {\n      return []\n    }\n  }\n\n  setParent(id, parentId) {\n    if (!this.compound) {\n      throw new Error('Cannot set parent in a non-compound graph')\n    }\n\n    if (!parentId) {\n      parentId = GRAPH_NODE\n    } else {\n      // Coerce parent to string\n      for (let ancestor = parent; !ancestor; ancestor = this.parent(ancestor)) {\n        if (ancestor === id) {\n          throw new Error(\n            'Setting ' +\n              parentId +\n              ' as parent of ' +\n              id +\n              ' would create a cycle'\n          )\n        }\n      }\n  \n      this.setNode(parentId)\n    }\n  \n    this.setNode(id)\n    delete this.children[parentId][id]\n    this.parent[id] = parentId\n    this.children[parentId][id] = true\n  }\n\n  /**\n   *\n   * @param {GraphNode} from\n   * @param {GraphNode} to\n   */\n  nodeEdges(from, to) {\n    const inEdges = this.inEdges(from, to)\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(from, to))\n    }\n  }\n\n  isSubgraph(id) {\n    return this.getChildren(id).length !== 0\n  }\n\n  layout() {\n    console.log('layouting graph')\n    const layoutGraph = new Layout(this)\n  }\n\n  /**\n   *\n   * @param {string} id\n   */\n  hasNode(id) {\n    return this._nodes[id]\n  }\n\n  /**\n   * @returns {Array<{label: string}>} all nodes of the graph\n   */\n  get nodes() {\n    return Object.values(this._nodes)\n  }\n\n  /**\n   * @returns {Array<{label: string}>} all edges of the graph\n   */\n  get edges() {\n    return Object.values(this._edges)\n  }\n\n  get sources() {\n    return this.nodes.filter(node => {\n      return Object.keys(this.in[node.id]).length === 0\n    })\n  }\n\n  /**\n   *\n   * @param {GraphNode} from\n   * @param {GraphNode} to\n   */\n  inEdges(from, to) {\n    // console.log('ins', this.in)\n    let inFrom = this.in[from.id]\n    // console.log('in from', from, 'to', to, inFrom)\n    if (!inFrom) {\n      return\n    }\n\n    const edges = Object.values(inFrom)\n    if (!to) {\n      return edges\n    }\n    return edges.filter(edge => edge.from.id === to.id)\n  }\n\n  /**\n   *\n   * @param {GraphNode} from\n   * @param {GraphNode} to\n   */\n  outEdges(from, to) {\n    // console.log('outs', this.out)\n    let outFrom = this.out[from.id]\n    // console.log('out from', from, 'to', to, outFrom)\n    if (!outFrom) {\n      return\n    }\n\n    const edges = Object.values(outFrom)\n    if (!to) {\n      return edges\n    }\n    return edges.filter(edge => edge.to.id === to.id)\n  }\n\n  /**\n   * @returns {Array<string>} array of all node IDs\n   */\n  get nodeIds() {\n    return Object.keys(this._nodes)\n  }\n}\n","export default class GraphSvg {\n  constructor(tag) {\n    /**\n     * @type {HTMLElement}\n     */\n    this.node = document.createElementNS('http://www.w3.org/2000/svg', tag)\n  }\n\n  /**\n   *\n   * @param {string|GraphSvg} tag\n   * @returns {GraphSvg}\n   */\n  append(el) {\n    if (!(el instanceof GraphSvg)) {\n      el = new GraphSvg(el)\n    }\n    this.node.appendChild(el.node)\n    return el\n  }\n\n  attr(attribute, value) {\n    this.node.setAttribute(attribute, value)\n    return this\n  }\n\n  select(selector) {\n    const res = this.node.querySelector(selector)\n    if (res) {\n      return new GraphSvg(res)\n    }\n\n    return null\n  }\n\n  selectAll(selector) {\n    const res = this.node.querySelectorAll(selector)\n    if (res) {\n      return Array.from(res).map(node => new GraphSvg(node))\n    }\n\n    return null\n  }\n\n  text(s) {\n    const el = document.createTextNode(s)\n    this.node.appendChild(el)\n    return this\n  }\n\n  /**\n   *\n   * @param {string} c\n   */\n  addClass(c) {\n    this.node.classList.add(c)\n    return this\n  }\n}\n","import GraphSvg from \"../graph/Svg\";\n\nexport default class Shape {\n\n  /**\n   * \n   * @param {string} shapeType \n   * @param {Object} bbox \n   * @param {Object} options \n   */\n  constructor(shapeType, bbox, options) {\n    /** @type {GraphSvg} */\n    this.shape = this[shapeType](bbox, options)\n    console.log('inside bbox', this.shape.node.getBBox())\n  }\n  /**\n   * \n   * @param {Object} bbox \n   * @param {Object} options \n   */\n  rect(bbox, options) {\n    console.log('bbox', bbox)\n    return new GraphSvg('rect')\n      .attr('rx', options.rx)\n      .attr('ry', options.ry)\n      .attr('x', -bbox.width / 2)\n      .attr('y', -bbox.height / 2)\n      .attr('width', bbox.width)\n      .attr('height', bbox.height)\n      .attr('rx', options.rx)\n  }\n}","import GraphSvg from \"./Svg\";\n\nexport default class GraphLabel {\n  constructor(labelData) {\n    this.group = new GraphSvg('g')\n    this.labelData = labelData\n\n    this.textLabel()\n  }\n\n  textLabel() {\n    const text = this.group.append('text').text(this.labelData.label)\n  }\n}","import Graph from './Graph'\nimport Shape from './graph/Shape'\nimport GraphSvg from './graph/Svg'\nimport GraphLabel from './graph/Label'\n\nexport default class Renderer {\n  /**\n   *\n   * @param {Graph} graph\n   */\n  constructor(graph) {\n    this.graph = graph\n  }\n\n  render(svg) {\n    console.log('rendering', svg, this.graph)\n    // TODO: remove all children of svg\n\n    const edgePathsGroup = this.createOrSelectGroup(svg, 'edgePaths')\n    const edgeLabels = this.createEdgeLabels(\n      this.createOrSelectGroup(svg, 'edgeLabels'),\n      this.graph\n    )\n    this.createNodes(this.createOrSelectGroup(svg, 'nodes'))\n\n    this.graph.layout()\n\n    let minX = 1000\n    let minY = 1000\n    let maxX = -1000\n    let maxY = -1000\n\n    this.graph.nodes.forEach(node => {\n      minX = Math.min(minX, node.x - node.width / 2)\n      minY = Math.min(minY, node.y - node.height / 2)\n      maxX = Math.max(maxX, node.x + node.width / 2)\n      maxY = Math.max(maxY, node.y + node.height / 2)\n    })\n\n    this.graph.edges.forEach(edge => {\n      if (edge.label && edge.x && edge.y) {\n        minX = Math.min(minX, edge.x - edge.width / 2)\n        minY = Math.min(minY, edge.y - edge.height / 2)\n        maxX = Math.max(maxX, edge.x + edge.width / 2)\n        maxY = Math.max(maxY, edge.y + edge.height / 2)\n      }\n      const points = edge.points.slice(1, edge.points.length - 1) // intersetion points don't matter\n      for (let i = 0; i < points.length; i++) {\n        const point = points[i]\n        minX = Math.min(minX, point.x)\n        minY = Math.min(minY, point.y)\n        maxX = Math.max(maxX, point.x)\n        maxY = Math.max(maxY, point.y)\n      }\n    })\n\n    this.graph.minX = minX\n    this.graph.minY = minY\n    this.graph.maxX = maxX\n    this.graph.maxY = maxY\n\n    console.log('GRAPH', this.graph)\n\n    this.positionNodes()\n  }\n\n  /**\n   *\n   * @param {GraphSvg} selection\n   * @param {Graph} graph\n   */\n  createNodes(selection) {\n    const simpleNodes = this.graph.nodeIds.filter(id => {\n      return !this.graph.isSubgraph(id)\n    })\n\n    // we have to append all simpleNodes to the graph now\n    this.graph.nodes.forEach(graphNode => {\n      const nodeGroup = selection.append('g').addClass('node')\n\n      const labelGroup = nodeGroup.append('g').addClass('label')\n      const label = labelGroup.append(\n        new GraphLabel({ label: graphNode.label }).group\n      )\n      const labelBBox = label.node.getBBox()\n\n      labelBBox.width += graphNode.paddingLeft + graphNode.paddingRight\n      labelBBox.height += graphNode.paddingTop + graphNode.paddingBottom\n\n      labelGroup.attr(\n        'transform',\n        'translate(' +\n          (graphNode.paddingLeft - graphNode.paddingRight) / 2 +\n          ',' +\n          (graphNode.paddingTop - graphNode.paddingBottom) / 2 +\n          ')'\n      )\n\n      // nodeGroup.node.style.opacity = 0\n\n      const shape = nodeGroup.append(\n        new Shape(graphNode.shape, labelBBox, graphNode).shape\n      )\n      const shapeBBox = shape.node.getBBox()\n      graphNode.width = shapeBBox.width\n      graphNode.height = shapeBBox.height\n      nodeGroup.append(labelGroup)\n      graphNode.svgGroup = nodeGroup\n    })\n    // let svgNodes = selection.querySelectorAll('g.node')\n    // svgNodes.forEach((svgNode) => {\n\n    //   svgNode.classList.add('update')\n    // })\n\n    // for (const node of nodes) {\n    //   const shape = shapes[node.shape]\n    // }\n  }\n\n  createLabel(selection) {}\n\n  /**\n   *\n   * @param {GraphSvg} selection\n   * @param {Graph} g\n   */\n  createEdgeLabels(selection, g) {\n    let svgEdgeLabels = selection.selectAll('g.edgeLabel')\n\n    this.graph.edges.forEach(edge => {\n      const edgeLabelGroup = selection.append('g').addClass('edgeLabel')\n\n      const labelGroup = edgeLabelGroup.append('g').addClass('label')\n      const label = labelGroup.append(\n        new GraphLabel({ label: edge.label }).group\n      )\n      const labelBBox = label.node.getBBox()\n\n      edge.width = edge.width || labelBBox.width\n      edge.height = edge.height || labelBBox.height\n    })\n  }\n\n  positionNodes() {\n    console.log(\n      'position nodes',\n      this.graph.nodes,\n      'with edges',\n      this.graph.edges\n    )\n    this.graph.nodes.forEach(graphNode => {\n      graphNode.svgGroup.attr(\n        'transform',\n        'translate(' + (graphNode.x || 0) + ',' + (graphNode.y || 0) + ')'\n      )\n    })\n  }\n\n  /**\n   *\n   * @param {GraphSvg} root\n   * @param {string} name\n   */\n  createOrSelectGroup(root, name) {\n    return root.select('g.' + name) || root.append('g').addClass(name)\n  }\n}\n","export default class FlowElement {\n  constructor(id, options) {\n    this.id = id\n    this.options = options\n    this.edges = []\n  }\n\n  leadsTo(destinationElement, options) {\n    this.edges.push({ otherId: destinationElement.id, options })\n    return destinationElement\n  }\n}\n","// import {} from \"d3\"\n// import {Graph} from \"graphlibrary\"\n// import dagreD3 from \"dagre-d3-renderer\"\nimport Graph from './Graph'\nimport Renderer from './Renderer'\nimport FlowElement from './FlowElement'\nimport GraphSvg from './graph/Svg';\n\nexport default class FlowChart {\n  constructor(options) {\n    this.elements = []\n  }\n\n  addElement(id, options) {\n    const el = new FlowElement(id, options)\n    this.elements.push(el)\n    return el\n  }\n\n  render(element) {\n    const svg = new GraphSvg('svg')\n    svg.node.id = 'f' + element.id\n    element.appendChild(svg.node)\n    const group = svg.append('g')\n\n    // Create the input graph\n    const graph = new Graph({\n      multiGraph: true,\n      compound: true,\n      rankDir: 'LR',\n      marginX: 20,\n      marginY: 20\n    })\n\n    // first create all nodes\n    for (const i in this.elements) {\n      const el = this.elements[i]\n      graph.setNode(el.id, el.options)\n    }\n\n    // now apply some styles to all nodes\n    for (const node of graph.nodes) {\n      node.rx = node.ry = 5\n    }\n\n    // now create all edges\n    for (const i in this.elements) {\n      const el = this.elements[i]\n      for (const k in el.edges) {\n        const edge = el.edges[k]\n\n        graph.setEdge(el.id, edge.otherId, edge.options)\n      }\n    }\n\n    const renderer = new Renderer(graph)\n\n    renderer.render(group)\n\n    // const svgElement = document.getElementById('f' + element.id)\n    // const groupElement = svgElement.querySelector('g')\n    // svgElement.style.width = groupElement.getBoundingClientRect().width + 40\n    // svgElement.style.height = groupElement.getBoundingClientRect().height + 40\n  }\n}\n","<template>\n  <div \n    :id=\"_uid\" \n    class=\"flowyChart\"/>\n</template>\n\n<script>\nimport FlowChart from './FlowChart'\n\nexport default {\n  name: 'VueFlowy',\n  props: {\n    chart: {\n      type: FlowChart,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chartElement: null\n    }\n  },\n  watch: {\n    'chart.elements': function(newVal, oldVal) {\n      this.chart.render(this.chartElement)\n    }\n  },\n  mounted() {\n    this.chartElement = document.getElementById(this._uid)\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.flowyChart {\n  svg {\n    display: block;\n    margin: 0 auto;\n  }\n\n  .node rect {\n    stroke: #999;\n    fill: #fff;\n    stroke-width: 1.5px;\n  }\n\n  .edgePath path {\n    stroke: #333;\n    stroke-width: 1.5px;\n  }\n}\n</style>\n","import mod from \"-!../node_modules/vue-loader/lib/index.js??vue-loader-options!./VueFlowy.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/vue-loader/lib/index.js??vue-loader-options!./VueFlowy.vue?vue&type=script&lang=js\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./VueFlowy.vue?vue&type=template&id=6244c0f8\"\nimport script from \"./VueFlowy.vue?vue&type=script&lang=js\"\nexport * from \"./VueFlowy.vue?vue&type=script&lang=js\"\nimport style0 from \"./VueFlowy.vue?vue&type=style&index=0&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import VueFlowy from './VueFlowy.vue'\nimport FlowChart from './FlowChart.js'\n\nconst plugin = {\n  install: Vue => {\n    Vue.component(VueFlowy.name, VueFlowy)\n  }\n}\n\nVueFlowy.install = plugin.install\n\nexport default { VueFlowy, FlowChart }\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--8-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-2-2!../node_modules/vue-loader/lib/index.js??vue-loader-options!./VueFlowy.vue?vue&type=style&index=0&lang=scss\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--8-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-2-2!../node_modules/vue-loader/lib/index.js??vue-loader-options!./VueFlowy.vue?vue&type=style&index=0&lang=scss\"","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  let i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n"],"sourceRoot":""}